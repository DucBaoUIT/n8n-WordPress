{
  "name": "Scan from 2000",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Sub Domain Loop ",
      "typeVersion": 1,
      "position": [
        1500,
        800
      ],
      "id": "fc8a5eb7-ea89-42d0-b928-781f6dba0396"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.domain }}",
        "allowUnauthorizedCerts": true,
        "responseFormat": "string",
        "options": {
          "fullResponse": false,
          "followAllRedirects": true,
          "followRedirect": false,
          "ignoreResponseCode": false
        }
      },
      "name": "Fetch Sub Domain",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -380,
        460
      ],
      "id": "e5beb910-7cd7-4813-b974-5df04a274625",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "requestMethod": "HEAD",
        "url": "={{ $json.image }}",
        "allowUnauthorizedCerts": true,
        "responseFormat": "string",
        "options": {
          "batchInterval": 1000,
          "fullResponse": false,
          "followAllRedirects": true,
          "followRedirect": false
        }
      },
      "name": "Check IMAGES",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        820,
        360
      ],
      "id": "4a7f7232-7fd6-4b34-a3db-88244e3e96e9",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "={{ $json.content }}\n------------------",
        "options": {
          "wait": false
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1360,
        340
      ],
      "id": "6ed1c981-487c-408f-8066-fa49329062d3",
      "name": "Log Images, IFrame",
      "webhookId": "6e6f7850-b5f7-41a6-8f4f-f6876e1784f3",
      "executeOnce": true,
      "alwaysOutputData": false,
      "credentials": {
        "discordWebhookApi": {
          "id": "ocy9BCF6vbNvMPr5",
          "name": "Discord Webhook Images IFrames "
        }
      }
    },
    {
      "parameters": {
        "batchSize": 20,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -600,
        500
      ],
      "id": "778470b0-e56b-43fd-a904-8f1d850aaa3c",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "image",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        220,
        360
      ],
      "id": "0a9db314-9ed0-4f0a-82cf-3e557d111ae8",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "image",
              "cssSelector": "img",
              "returnValue": "attribute",
              "attribute": "src",
              "returnArray": true
            },
            {
              "key": "iframe",
              "cssSelector": "iframe",
              "returnValue": "attribute",
              "attribute": "src",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -160,
        440
      ],
      "id": "a2b8b073-f689-4842-ba9f-29abc6d1752c",
      "name": "Extract "
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        640,
        360
      ],
      "id": "ca0ad716-280c-419b-915f-ccd6a3813c36",
      "name": "Remove Duplicates",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "=Domain: {{ $json.domain }}\nStatus: {{ $json.error.status }}\nLog: {{ $json.error.code }}\n////////////////////////////////",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        -140,
        800
      ],
      "id": "6deea612-8cd4-43e5-b605-e77ced3d1f4f",
      "name": "Log Status SubDomain1",
      "webhookId": "497e35b3-18c1-475a-bceb-c5b2547b5cd6",
      "credentials": {
        "discordWebhookApi": {
          "id": "ijERmmgaOVpveUgv",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -820,
        500
      ],
      "id": "405fa12c-2ef3-496b-b4ae-cd44c52b2ed5",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "return items.filter(item => {\n  const images = item.json.image;\n\n  // Hàm kiểm tra URL hợp lệ, không phải Data URI\n  const isValidUrl = (url) => {\n    if (typeof url !== 'string') return false;\n    const trimmed = url.trim();\n    return (\n      trimmed !== '' &&\n      !trimmed.startsWith('data:') // Loại bỏ Data URI\n    );\n  };\n\n  if (Array.isArray(images)) {\n    const filtered = images.filter(isValidUrl);\n    if (filtered.length === 0) return false;\n\n    item.json.image = filtered; // Giữ lại mảng image đã lọc\n    return true;\n  }\n\n  if (typeof images === 'string') {\n    return isValidUrl(images);\n  }\n\n  return false;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        360
      ],
      "id": "c99adc29-fc65-4067-940b-f07dd1734bbd",
      "name": "Filter Image"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c9b2029c-7f54-449d-b738-59767648de39",
              "leftValue": "={{ $json.image }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20,
        340
      ],
      "id": "519d2258-4a4b-494f-a22c-e0e51787d0af",
      "name": "Empty Array"
    },
    {
      "parameters": {
        "jsCode": "const domain = $('Loop Over Items').item?.json?.domain || 'Unknown';\nconst seen = new Set();\nconst results = [];\n\nfor (const item of items) {\n  const error = item.json?.error;\n  const statusCode = item.json?.error?.code || 'Unknown';\n\n  const images = item.json?.image || [];\n  const iframes = item.json?.iframe || [];\n\n  const imageList = Array.isArray(images) ? images : [images];\n  const iframeList = Array.isArray(iframes) ? iframes : [iframes];\n\n  for (const url of imageList) {\n    if (url && error && !seen.has(`image:${url}`)) {\n      seen.add(`image:${url}`);\n      results.push(`🖼️ Image: ${url} (Error: ${statusCode})`);\n    }\n  }\n\n  for (const url of iframeList) {\n    if (url && error && !seen.has(`iframe:${url}`)) {\n      seen.add(`iframe:${url}`);\n      results.push(`🧩 Iframe: ${url} (Error: ${statusCode})`);\n    }\n  }\n}\n\nconst limited = results.slice(0, 50);\n\nreturn [{\n  json: {\n    content: limited.length\n      ? `🚨Domain Error: ${domain}\\n${limited.join('\\n')}`\n      : '',\n  },\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        340
      ],
      "id": "1c1123d4-5922-45d8-889a-fb16524ee843",
      "name": "Merge Notifications"
    },
    {
      "parameters": {
        "content": "# 1. Check Status and get image data of each domain\n\n## - Use node Loop to split domains into small Batchs \n\n## - Checking HTTP status of domain, if error -> Notification through Discord node\n\n## - Extract image into array ",
        "height": 720,
        "width": 860,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -860,
        200
      ],
      "id": "ab5f6f9d-7c19-40ad-801a-7a43484c59eb",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# 2. Process Images\n\n## - Checking if Array Empty, go to next Loop \n\n## - Use node split out to split all images out of array \n\n## - Filter images can check\n\n## - Remove images duplicate like logo\n \n",
        "height": 820,
        "width": 740,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "2d65710b-5b76-446c-8e98-24beefec07db",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# 3. Check and Notify\n\n## - Check images by HTTP Request node. If there is no error, go to next loop, else go to notify through discord channel\n\n## - Node Code to merge all error of one domain prevent from multi notifications from one loop  \n",
        "height": 740,
        "width": 820,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        760,
        40
      ],
      "id": "a711f079-9d3b-45ed-9e03-315badaab6ad",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "requestMethod": "HEAD",
        "url": "={{ $json.iframe }}",
        "allowUnauthorizedCerts": true,
        "responseFormat": "string",
        "options": {
          "batchInterval": 1000,
          "fullResponse": false,
          "followAllRedirects": true,
          "followRedirect": false
        }
      },
      "name": "Check IFRAMES",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        820,
        620
      ],
      "id": "1d3030af-fb7a-4931-a34e-37de7f3dff4a",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "iframe",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        220,
        620
      ],
      "id": "ba245c50-1cdf-47b1-9856-d5859efe1646",
      "name": "Split Out1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1060,
        340
      ],
      "id": "7012065c-78c5-412f-bf8c-e06dab3a8590",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "return items.filter(item => {\n  const iframe = item.json.iframe;\n\n  if (typeof iframe !== 'string') return false;\n  if (iframe.trim() === '') return false;\n\n  return true;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        620
      ],
      "id": "39c31a15-2f8b-43a8-86cb-32276ae9c545",
      "name": "Filter Iframe"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7f00ca7d-b6c9-4e40-b928-32e1f05084b4",
              "leftValue": "={{ $json.iframe }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20,
        600
      ],
      "id": "625cd93f-4eb1-4186-a7fe-774064778ee2",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        640,
        620
      ],
      "id": "dc962660-f43d-4a48-9011-6e336d2b1b60",
      "name": "Remove Duplicates1",
      "onError": "continueRegularOutput"
    }
  ],
  "pinData": {},
  "connections": {
    "Sub Domain Loop ": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Sub Domain": {
      "main": [
        [
          {
            "node": "Extract ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Status SubDomain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check IMAGES": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Images, IFrame": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Fetch Sub Domain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Filter Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract ": {
      "main": [
        [
          {
            "node": "Empty Array",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Check IMAGES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Status SubDomain1": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Image": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty Array": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Notifications": {
      "main": [
        [
          {
            "node": "Log Images, IFrame",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check IFRAMES": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Filter Iframe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Iframe": {
      "main": [
        [
          {
            "node": "Remove Duplicates1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates1": {
      "main": [
        [
          {
            "node": "Check IFRAMES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c3a7e9ff-eb67-49b0-9740-6ed5bca88e65",
  "meta": {
    "instanceId": "da33118653b457a38767846f003a1ddd3b6e88f9568f32164fe696d219064bab"
  },
  "id": "i2mexL3LzZuuqXZ9",
  "tags": []
}