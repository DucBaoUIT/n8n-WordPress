{
  "name": "Scan Others",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Sub Domain Loop ",
      "typeVersion": 1,
      "position": [
        1600,
        800
      ],
      "id": "04046081-d80f-4e39-bb44-85e73f362214"
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "={{ $json.domain }}",
        "allowUnauthorizedCerts": true,
        "responseFormat": "string",
        "options": {
          "fullResponse": false,
          "followAllRedirects": true,
          "followRedirect": false,
          "ignoreResponseCode": false
        }
      },
      "name": "Fetch Sub Domain",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        -560,
        500
      ],
      "id": "ad754ddb-b423-49c1-ab6d-9c16d9c40034",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "requestMethod": "HEAD",
        "url": "={{ $json.image }}",
        "allowUnauthorizedCerts": true,
        "responseFormat": "string",
        "options": {
          "batchInterval": 1000,
          "fullResponse": false,
          "followAllRedirects": true,
          "followRedirect": false
        }
      },
      "name": "Check IMAGES",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        860,
        360
      ],
      "id": "0b218d6f-419b-411e-b9c8-242b310ae943",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "={{ $json.content }}\n------------------",
        "options": {
          "wait": false
        }
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1480,
        360
      ],
      "id": "e608ed8c-22e2-4175-9ebc-b18c7b4a819d",
      "name": "Log Images, IFrame",
      "webhookId": "3e868fbf-7db2-4e19-85d4-0b08b2c66140",
      "executeOnce": true,
      "alwaysOutputData": false,
      "credentials": {
        "discordWebhookApi": {
          "id": "ocy9BCF6vbNvMPr5",
          "name": "Discord Webhook Images IFrames "
        }
      }
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -800,
        500
      ],
      "id": "ea0cc02d-df8f-483d-bf5b-66bcaa22e991",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "fieldToSplitOut": "image",
        "include": "selectedOtherFields",
        "fieldsToInclude": "domain",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        280,
        360
      ],
      "id": "603a7a75-6f82-4373-8ba0-dfd5670ac18e",
      "name": "Split Out"
    },
    {
      "parameters": {
        "operation": "extractHtmlContent",
        "extractionValues": {
          "values": [
            {
              "key": "image",
              "cssSelector": "img",
              "returnValue": "attribute",
              "attribute": "src",
              "returnArray": true
            },
            {
              "key": "iframe",
              "cssSelector": "iframe",
              "returnValue": "attribute",
              "attribute": "src",
              "returnArray": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.html",
      "typeVersion": 1.2,
      "position": [
        -360,
        480
      ],
      "id": "b5582805-7efb-457e-974c-e869acb93aa5",
      "name": "Extract ",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        640,
        360
      ],
      "id": "856606be-d6db-481a-9b0f-03b36b8a0b71",
      "name": "Remove Duplicates",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "=Domain: {{ $json.domain }}\nStatus: {{ $json.error.status }}\nLog: {{ $json.error.code }}\n////////////////////////////////",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        -140,
        800
      ],
      "id": "89603b66-f83a-4580-a000-3cd0739ae18d",
      "name": "Log Status SubDomain1",
      "webhookId": "eca9c3df-c7c3-4102-99e7-97e9c62846b2",
      "credentials": {
        "discordWebhookApi": {
          "id": "ijERmmgaOVpveUgv",
          "name": "Discord Webhook account"
        }
      }
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1020,
        360
      ],
      "id": "10c6d461-6cdc-4cc9-9cbd-81cd5ec2ebdf",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "return items.filter(item => {\n  const images = item.json.image;\n\n  // H√†m ki·ªÉm tra URL h·ª£p l·ªá, kh√¥ng ph·∫£i Data URI\n  const isValidUrl = (url) => {\n    if (typeof url !== 'string') return false;\n    const trimmed = url.trim();\n    return (\n      trimmed !== '' &&\n      !trimmed.startsWith('data:') // Lo·∫°i b·ªè Data URI\n    );\n  };\n\n  if (Array.isArray(images)) {\n    const filtered = images.filter(isValidUrl);\n    if (filtered.length === 0) return false;\n\n    item.json.image = filtered; // Gi·ªØ l·∫°i m·∫£ng image ƒë√£ l·ªçc\n    return true;\n  }\n\n  if (typeof images === 'string') {\n    return isValidUrl(images);\n  }\n\n  return false;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        360
      ],
      "id": "e56c866b-e52a-4655-8f4e-7f32ff9213d2",
      "name": "Filter Image"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c9b2029c-7f54-449d-b738-59767648de39",
              "leftValue": "={{ $json.image }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        100,
        280
      ],
      "id": "20e7f7bc-df66-49d1-86e6-e97c89fc0f4e",
      "name": "Empty Array"
    },
    {
      "parameters": {
        "jsCode": "const domainErrorsMap = {}; // Map: domain => list of errors\nconst seen = new Set();\n\nfor (const item of items) {\n  const error = item.json?.error;\n  const statusCode = item.json?.error?.code || 'Unknown';\n  const domain = item.json?.domain || 'Unknown';\n\n  const images = item.json?.image || [];\n  const iframes = item.json?.iframe || [];\n\n  const imageList = Array.isArray(images) ? images : [images];\n  const iframeList = Array.isArray(iframes) ? iframes : [iframes];\n\n  for (const url of imageList) {\n    const key = `image:${url}`;\n    if (url && error && !seen.has(key)) {\n      seen.add(key);\n      if (!domainErrorsMap[domain]) domainErrorsMap[domain] = [];\n      domainErrorsMap[domain].push(`üñºÔ∏è Image: ${url} (Error: ${statusCode})`);\n    }\n  }\n\n  for (const url of iframeList) {\n    const key = `iframe:${url}`;\n    if (url && error && !seen.has(key)) {\n      seen.add(key);\n      if (!domainErrorsMap[domain]) domainErrorsMap[domain] = [];\n      domainErrorsMap[domain].push(`üß© Iframe: ${url} (Error: ${statusCode})`);\n    }\n  }\n}\n\n// Tr·∫£ v·ªÅ th√¥ng b√°o cho t·ª´ng domain, chia nh·ªè n·∫øu l·ªói qu√° nhi·ªÅu\nconst batchSize = 10;\nconst messages = [];\n\nfor (const [domain, errors] of Object.entries(domainErrorsMap)) {\n  for (let i = 0; i < errors.length; i += batchSize) {\n    const chunk = errors.slice(i, i + batchSize);\n    const part = Math.floor(i / batchSize) + 1;\n\n    messages.push({\n      json: {\n        content: `üö®Domain Error: ${domain} (Part #${part})\\n${chunk.join('\\n')}`\n      }\n    });\n  }\n}\n\nreturn messages;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        360
      ],
      "id": "a7520817-aab7-43e9-b48a-f8391012eab0",
      "name": "Merge Notifications"
    },
    {
      "parameters": {
        "content": "# 1. Check Status and get image data of each domain\n\n## - Use node Loop to split domains into small Batchs \n\n## - Checking HTTP status of domain, if error -> Notification through Discord node\n\n## - Extract image into array ",
        "height": 720,
        "width": 860,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -860,
        200
      ],
      "id": "e6d61bc9-ecd5-40ea-9b18-8fb44a10fa97",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "# 2. Process Images\n\n## - Checking if Array Empty, go to next Loop \n\n## - Use node split out to split all images out of array \n\n## - Filter images can check\n\n## - Remove images duplicate like logo\n \n",
        "height": 920,
        "width": 740,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        -60
      ],
      "id": "b6041558-bb79-4865-83e9-0eaf5ec3d7a6",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# 3. Check and Notify\n\n## - Check images by HTTP Request node. If there is no error, go to next loop, else go to notify through discord channel\n\n## - Node Code to merge all error of one domain prevent from multi notifications from one loop  \n",
        "height": 740,
        "width": 820,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        760,
        40
      ],
      "id": "74e1b845-3f9f-428a-b1eb-b527d15fd88e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "requestMethod": "HEAD",
        "url": "={{ $json.iframe }}",
        "allowUnauthorizedCerts": true,
        "responseFormat": "string",
        "options": {
          "batchInterval": 1000,
          "fullResponse": false,
          "followAllRedirects": true,
          "followRedirect": false
        }
      },
      "name": "Check IFRAMES",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [
        860,
        640
      ],
      "id": "c2474c8c-74f6-4353-aa47-ba63147fa83e",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "fieldToSplitOut": "iframe",
        "include": "selectedOtherFields",
        "fieldsToInclude": "domain",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        220,
        640
      ],
      "id": "5cd1ecb2-7658-4b4e-971f-7f7b2ae9d641",
      "name": "Split Out1"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1060,
        360
      ],
      "id": "d3e2e7da-1708-4f6e-9f08-6d84685446d5",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "return items.filter(item => {\n  const iframe = item.json.iframe;\n\n  if (typeof iframe !== 'string') return false;\n  if (iframe.trim() === '') return false;\n\n  return true;\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        420,
        640
      ],
      "id": "e94db6af-8ad6-44f1-bdd3-b83fd6a715c8",
      "name": "Filter Iframe"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "7f00ca7d-b6c9-4e40-b928-32e1f05084b4",
              "leftValue": "={{ $json.iframe }}",
              "rightValue": "",
              "operator": {
                "type": "array",
                "operation": "empty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        20,
        740
      ],
      "id": "2eb70982-7e34-4e6b-aa55-a8214a3c27a2",
      "name": "If"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.removeDuplicates",
      "typeVersion": 2,
      "position": [
        640,
        640
      ],
      "id": "bc09a519-a7de-465a-a370-a6203b75af6c",
      "name": "Remove Duplicates1",
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "return items.map(item => {\n  return {\n    json: {\n      ...item.json,\n      domain: item.json.domain || $('Loop Over Items').item?.json?.domain || 'Unknown'\n    }\n  };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        480
      ],
      "id": "ca84ea7f-0ce4-433a-8710-7202a8dbdd85",
      "name": "Set Domain"
    }
  ],
  "pinData": {},
  "connections": {
    "Sub Domain Loop ": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Sub Domain": {
      "main": [
        [
          {
            "node": "Extract ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Status SubDomain1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check IMAGES": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Images, IFrame": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Fetch Sub Domain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Filter Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract ": {
      "main": [
        [
          {
            "node": "Set Domain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates": {
      "main": [
        [
          {
            "node": "Check IMAGES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Status SubDomain1": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Image": {
      "main": [
        [
          {
            "node": "Remove Duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Empty Array": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Notifications": {
      "main": [
        [
          {
            "node": "Log Images, IFrame",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check IFRAMES": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "Filter Iframe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Merge Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filter Iframe": {
      "main": [
        [
          {
            "node": "Remove Duplicates1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Sub Domain Loop ",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove Duplicates1": {
      "main": [
        [
          {
            "node": "Check IFRAMES",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Domain": {
      "main": [
        [
          {
            "node": "Empty Array",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f9d9ea67-c22d-4b78-b828-50ba7ed3efbb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "da33118653b457a38767846f003a1ddd3b6e88f9568f32164fe696d219064bab"
  },
  "id": "WYr7ef4gbJf4cpHf",
  "tags": []
}